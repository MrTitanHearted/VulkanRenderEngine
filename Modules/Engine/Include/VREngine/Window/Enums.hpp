#pragma once

#include <VREngine/Core.hpp>

namespace vre {
    enum class KeyCode : std::uint32_t {
        eSpace        = GLFW_KEY_SPACE,
        eApostrophe   = GLFW_KEY_APOSTROPHE,
        eComma        = GLFW_KEY_COMMA,
        eMinus        = GLFW_KEY_MINUS,
        ePeriod       = GLFW_KEY_PERIOD,
        eSlash        = GLFW_KEY_SLASH,
        e0            = GLFW_KEY_0,
        e1            = GLFW_KEY_1,
        e2            = GLFW_KEY_2,
        e3            = GLFW_KEY_3,
        e4            = GLFW_KEY_4,
        e5            = GLFW_KEY_5,
        e6            = GLFW_KEY_6,
        e7            = GLFW_KEY_7,
        e8            = GLFW_KEY_8,
        e9            = GLFW_KEY_9,
        eSemicolon    = GLFW_KEY_SEMICOLON,
        eEqual        = GLFW_KEY_EQUAL,
        eA            = GLFW_KEY_A,
        eB            = GLFW_KEY_B,
        eC            = GLFW_KEY_C,
        eD            = GLFW_KEY_D,
        eE            = GLFW_KEY_E,
        eF            = GLFW_KEY_F,
        eG            = GLFW_KEY_G,
        eH            = GLFW_KEY_H,
        eI            = GLFW_KEY_I,
        eJ            = GLFW_KEY_J,
        eK            = GLFW_KEY_K,
        eL            = GLFW_KEY_L,
        eM            = GLFW_KEY_M,
        eN            = GLFW_KEY_N,
        eO            = GLFW_KEY_O,
        eP            = GLFW_KEY_P,
        eQ            = GLFW_KEY_Q,
        eR            = GLFW_KEY_R,
        eS            = GLFW_KEY_S,
        eT            = GLFW_KEY_T,
        eU            = GLFW_KEY_U,
        eV            = GLFW_KEY_V,
        eW            = GLFW_KEY_W,
        eX            = GLFW_KEY_X,
        eY            = GLFW_KEY_Y,
        eZ            = GLFW_KEY_Z,
        eLeftBracket  = GLFW_KEY_LEFT_BRACKET,
        eBackslash    = GLFW_KEY_BACKSLASH,
        eRightBracket = GLFW_KEY_RIGHT_BRACKET,
        eGraveAccent  = GLFW_KEY_GRAVE_ACCENT,
        eWorld1       = GLFW_KEY_WORLD_1,
        eWorld2       = GLFW_KEY_WORLD_2,
        eEscape       = GLFW_KEY_ESCAPE,
        eEnter        = GLFW_KEY_ENTER,
        eTab          = GLFW_KEY_TAB,
        eBackspace    = GLFW_KEY_BACKSPACE,
        eInsert       = GLFW_KEY_INSERT,
        eDelete       = GLFW_KEY_DELETE,
        eRight        = GLFW_KEY_RIGHT,
        eLeft         = GLFW_KEY_LEFT,
        eDown         = GLFW_KEY_DOWN,
        eUp           = GLFW_KEY_UP,
        ePageUp       = GLFW_KEY_PAGE_UP,
        ePageDown     = GLFW_KEY_PAGE_DOWN,
        eHome         = GLFW_KEY_HOME,
        eEnd          = GLFW_KEY_END,
        eCapsLock     = GLFW_KEY_CAPS_LOCK,
        eScrollLock   = GLFW_KEY_SCROLL_LOCK,
        eNumLock      = GLFW_KEY_NUM_LOCK,
        ePrintScreen  = GLFW_KEY_PRINT_SCREEN,
        ePause        = GLFW_KEY_PAUSE,
        eF1           = GLFW_KEY_F1,
        eF2           = GLFW_KEY_F2,
        eF3           = GLFW_KEY_F3,
        eF4           = GLFW_KEY_F4,
        eF5           = GLFW_KEY_F5,
        eF6           = GLFW_KEY_F6,
        eF7           = GLFW_KEY_F7,
        eF8           = GLFW_KEY_F8,
        eF9           = GLFW_KEY_F9,
        eF10          = GLFW_KEY_F10,
        eF11          = GLFW_KEY_F11,
        eF12          = GLFW_KEY_F12,
        eF13          = GLFW_KEY_F13,
        eF14          = GLFW_KEY_F14,
        eF15          = GLFW_KEY_F15,
        eF16          = GLFW_KEY_F16,
        eF17          = GLFW_KEY_F17,
        eF18          = GLFW_KEY_F18,
        eF19          = GLFW_KEY_F19,
        eF20          = GLFW_KEY_F20,
        eF21          = GLFW_KEY_F21,
        eF22          = GLFW_KEY_F22,
        eF23          = GLFW_KEY_F23,
        eF24          = GLFW_KEY_F24,
        eF25          = GLFW_KEY_F25,
        eKp0          = GLFW_KEY_KP_0,
        eKp1          = GLFW_KEY_KP_1,
        eKp2          = GLFW_KEY_KP_2,
        eKp3          = GLFW_KEY_KP_3,
        eKp4          = GLFW_KEY_KP_4,
        eKp5          = GLFW_KEY_KP_5,
        eKp6          = GLFW_KEY_KP_6,
        eKp7          = GLFW_KEY_KP_7,
        eKp8          = GLFW_KEY_KP_8,
        eKp9          = GLFW_KEY_KP_9,
        eKpDecimal    = GLFW_KEY_KP_DECIMAL,
        eKpDivide     = GLFW_KEY_KP_DIVIDE,
        eKpMultiply   = GLFW_KEY_KP_MULTIPLY,
        eKpSubtract   = GLFW_KEY_KP_SUBTRACT,
        eKpAdd        = GLFW_KEY_KP_ADD,
        eKpEnter      = GLFW_KEY_KP_ENTER,
        eKpEqual      = GLFW_KEY_KP_EQUAL,
        eLeftShift    = GLFW_KEY_LEFT_SHIFT,
        eLeftControl  = GLFW_KEY_LEFT_CONTROL,
        eLeftAlt      = GLFW_KEY_LEFT_ALT,
        eLeftSuper    = GLFW_KEY_LEFT_SUPER,
        eRightShift   = GLFW_KEY_RIGHT_SHIFT,
        eRightControl = GLFW_KEY_RIGHT_CONTROL,
        eRightAlt     = GLFW_KEY_RIGHT_ALT,
        eRightSuper   = GLFW_KEY_RIGHT_SUPER,
        eMenu         = GLFW_KEY_MENU,
        eLast         = GLFW_KEY_LAST,
    };

    enum class KeyMod : std::uint32_t {
        eNone     = 0,
        eShift    = GLFW_MOD_SHIFT,
        eControl  = GLFW_MOD_CONTROL,
        eAlt      = GLFW_MOD_ALT,
        eSuper    = GLFW_MOD_SUPER,
        eCapsLock = GLFW_MOD_CAPS_LOCK,
        eNumLock  = GLFW_MOD_NUM_LOCK,
        eAll      = GLFW_MOD_SHIFT | GLFW_MOD_CONTROL | GLFW_MOD_ALT | GLFW_MOD_SUPER | GLFW_MOD_CAPS_LOCK | GLFW_MOD_NUM_LOCK,
    };

    enum class KeyAction : std::uint32_t {
        ePress   = GLFW_PRESS,
        eRelease = GLFW_RELEASE,
        eRepeat  = GLFW_REPEAT,
    };

    enum class MouseButton : std::uint32_t {
        e1      = GLFW_MOUSE_BUTTON_1,
        e2      = GLFW_MOUSE_BUTTON_2,
        e3      = GLFW_MOUSE_BUTTON_3,
        e4      = GLFW_MOUSE_BUTTON_4,
        e5      = GLFW_MOUSE_BUTTON_5,
        e6      = GLFW_MOUSE_BUTTON_6,
        e7      = GLFW_MOUSE_BUTTON_7,
        e8      = GLFW_MOUSE_BUTTON_8,
        eLast   = GLFW_MOUSE_BUTTON_LAST,
        eLeft   = GLFW_MOUSE_BUTTON_LEFT,
        eRight  = GLFW_MOUSE_BUTTON_RIGHT,
        eMiddle = GLFW_MOUSE_BUTTON_MIDDLE,
        eX1     = GLFW_MOUSE_BUTTON_4,
        eX2     = GLFW_MOUSE_BUTTON_5,
    };

    enum class CursorMode : std::uint32_t {
        eNormal   = GLFW_CURSOR_NORMAL,
        eHidden   = GLFW_CURSOR_HIDDEN,
        eDisabled = GLFW_CURSOR_DISABLED,
        eCaptured = GLFW_CURSOR_CAPTURED,
    };

    VRE_ENUM_UINT_BITWISE_OPERATORS(KeyMod)

    const char *GetKeyCodeName(KeyCode key);
    const char *GetKeyModName(KeyMod mod);
    const char *GetKeyActionName(KeyAction action);
    const char *GetMouseButtonName(MouseButton button);
    const char *GetCursorModeName(CursorMode mode);
}  // namespace vre